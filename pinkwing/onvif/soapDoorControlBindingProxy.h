/* soapDoorControlBindingProxy.h
   Generated by gSOAP 2.8.134 for samples/onvif/onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2024, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapDoorControlBindingProxy_H
#define soapDoorControlBindingProxy_H
#include "soapH.h"

    class SOAP_CMAC DoorControlBindingProxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        /// flag indicating that this context is owned by this proxy and should be deleted by the destructor
        bool soap_own;
        /// Endpoint URL of service 'DoorControlBindingProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in samples/onvif/onvif.h, if any
        /// Construct a proxy with new managing context
        DoorControlBindingProxy();
        /// Copy constructor
        DoorControlBindingProxy(const DoorControlBindingProxy& rhs);
        /// Construct proxy given a shared managing context
        DoorControlBindingProxy(struct soap*);
        /// Construct proxy given a shared managing context and endpoint URL
        DoorControlBindingProxy(struct soap*, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        DoorControlBindingProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        DoorControlBindingProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        DoorControlBindingProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        DoorControlBindingProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context, when the context was allocated by the constructor
        virtual ~DoorControlBindingProxy();
        /// Initializer used by constructors
        virtual void DoorControlBindingProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual DoorControlBindingProxy *copy();
        /// Copy assignment
        DoorControlBindingProxy& operator=(const DoorControlBindingProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Add SOAP Header to message
        virtual void soap_header(struct _wsse__Security *wsse__Security, char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct wsdd__AppSequenceType *wsdd__AppSequence, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance);
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'GetServiceCapabilities' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetServiceCapabilities(_ns6__GetServiceCapabilities *ns6__GetServiceCapabilities, _ns6__GetServiceCapabilitiesResponse &ns6__GetServiceCapabilitiesResponse) { return this->GetServiceCapabilities(NULL, NULL, ns6__GetServiceCapabilities, ns6__GetServiceCapabilitiesResponse); }
        /// Web service synchronous operation 'GetServiceCapabilities' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetServiceCapabilities(const char *soap_endpoint_url, const char *soap_action, _ns6__GetServiceCapabilities *ns6__GetServiceCapabilities, _ns6__GetServiceCapabilitiesResponse &ns6__GetServiceCapabilitiesResponse) { return this->send_GetServiceCapabilities(soap_endpoint_url, soap_action, ns6__GetServiceCapabilities) || this->recv_GetServiceCapabilities(ns6__GetServiceCapabilitiesResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetServiceCapabilities' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetServiceCapabilities(const char *soap_endpoint_url, const char *soap_action, _ns6__GetServiceCapabilities *ns6__GetServiceCapabilities);
        /// Web service asynchronous operation 'recv_GetServiceCapabilities' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetServiceCapabilities(_ns6__GetServiceCapabilitiesResponse &ns6__GetServiceCapabilitiesResponse);
        //
        /// Web service synchronous operation 'GetDoorInfoList' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorInfoList(_ns6__GetDoorInfoList *ns6__GetDoorInfoList, _ns6__GetDoorInfoListResponse &ns6__GetDoorInfoListResponse) { return this->GetDoorInfoList(NULL, NULL, ns6__GetDoorInfoList, ns6__GetDoorInfoListResponse); }
        /// Web service synchronous operation 'GetDoorInfoList' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorInfoList(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorInfoList *ns6__GetDoorInfoList, _ns6__GetDoorInfoListResponse &ns6__GetDoorInfoListResponse) { return this->send_GetDoorInfoList(soap_endpoint_url, soap_action, ns6__GetDoorInfoList) || this->recv_GetDoorInfoList(ns6__GetDoorInfoListResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetDoorInfoList' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetDoorInfoList(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorInfoList *ns6__GetDoorInfoList);
        /// Web service asynchronous operation 'recv_GetDoorInfoList' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetDoorInfoList(_ns6__GetDoorInfoListResponse &ns6__GetDoorInfoListResponse);
        //
        /// Web service synchronous operation 'GetDoorInfo' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorInfo(_ns6__GetDoorInfo *ns6__GetDoorInfo, _ns6__GetDoorInfoResponse &ns6__GetDoorInfoResponse) { return this->GetDoorInfo(NULL, NULL, ns6__GetDoorInfo, ns6__GetDoorInfoResponse); }
        /// Web service synchronous operation 'GetDoorInfo' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorInfo(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorInfo *ns6__GetDoorInfo, _ns6__GetDoorInfoResponse &ns6__GetDoorInfoResponse) { return this->send_GetDoorInfo(soap_endpoint_url, soap_action, ns6__GetDoorInfo) || this->recv_GetDoorInfo(ns6__GetDoorInfoResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetDoorInfo' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetDoorInfo(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorInfo *ns6__GetDoorInfo);
        /// Web service asynchronous operation 'recv_GetDoorInfo' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetDoorInfo(_ns6__GetDoorInfoResponse &ns6__GetDoorInfoResponse);
        //
        /// Web service synchronous operation 'GetDoorList' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorList(_ns6__GetDoorList *ns6__GetDoorList, _ns6__GetDoorListResponse &ns6__GetDoorListResponse) { return this->GetDoorList(NULL, NULL, ns6__GetDoorList, ns6__GetDoorListResponse); }
        /// Web service synchronous operation 'GetDoorList' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorList(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorList *ns6__GetDoorList, _ns6__GetDoorListResponse &ns6__GetDoorListResponse) { return this->send_GetDoorList(soap_endpoint_url, soap_action, ns6__GetDoorList) || this->recv_GetDoorList(ns6__GetDoorListResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetDoorList' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetDoorList(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorList *ns6__GetDoorList);
        /// Web service asynchronous operation 'recv_GetDoorList' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetDoorList(_ns6__GetDoorListResponse &ns6__GetDoorListResponse);
        //
        /// Web service synchronous operation 'GetDoors' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoors(_ns6__GetDoors *ns6__GetDoors, _ns6__GetDoorsResponse &ns6__GetDoorsResponse) { return this->GetDoors(NULL, NULL, ns6__GetDoors, ns6__GetDoorsResponse); }
        /// Web service synchronous operation 'GetDoors' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoors(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoors *ns6__GetDoors, _ns6__GetDoorsResponse &ns6__GetDoorsResponse) { return this->send_GetDoors(soap_endpoint_url, soap_action, ns6__GetDoors) || this->recv_GetDoors(ns6__GetDoorsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetDoors' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetDoors(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoors *ns6__GetDoors);
        /// Web service asynchronous operation 'recv_GetDoors' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetDoors(_ns6__GetDoorsResponse &ns6__GetDoorsResponse);
        //
        /// Web service synchronous operation 'CreateDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int CreateDoor(_ns6__CreateDoor *ns6__CreateDoor, _ns6__CreateDoorResponse &ns6__CreateDoorResponse) { return this->CreateDoor(NULL, NULL, ns6__CreateDoor, ns6__CreateDoorResponse); }
        /// Web service synchronous operation 'CreateDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int CreateDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__CreateDoor *ns6__CreateDoor, _ns6__CreateDoorResponse &ns6__CreateDoorResponse) { return this->send_CreateDoor(soap_endpoint_url, soap_action, ns6__CreateDoor) || this->recv_CreateDoor(ns6__CreateDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_CreateDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_CreateDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__CreateDoor *ns6__CreateDoor);
        /// Web service asynchronous operation 'recv_CreateDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_CreateDoor(_ns6__CreateDoorResponse &ns6__CreateDoorResponse);
        //
        /// Web service synchronous operation 'SetDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetDoor(_ns6__SetDoor *ns6__SetDoor, _ns6__SetDoorResponse &ns6__SetDoorResponse) { return this->SetDoor(NULL, NULL, ns6__SetDoor, ns6__SetDoorResponse); }
        /// Web service synchronous operation 'SetDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__SetDoor *ns6__SetDoor, _ns6__SetDoorResponse &ns6__SetDoorResponse) { return this->send_SetDoor(soap_endpoint_url, soap_action, ns6__SetDoor) || this->recv_SetDoor(ns6__SetDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__SetDoor *ns6__SetDoor);
        /// Web service asynchronous operation 'recv_SetDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetDoor(_ns6__SetDoorResponse &ns6__SetDoorResponse);
        //
        /// Web service synchronous operation 'ModifyDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int ModifyDoor(_ns6__ModifyDoor *ns6__ModifyDoor, _ns6__ModifyDoorResponse &ns6__ModifyDoorResponse) { return this->ModifyDoor(NULL, NULL, ns6__ModifyDoor, ns6__ModifyDoorResponse); }
        /// Web service synchronous operation 'ModifyDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int ModifyDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__ModifyDoor *ns6__ModifyDoor, _ns6__ModifyDoorResponse &ns6__ModifyDoorResponse) { return this->send_ModifyDoor(soap_endpoint_url, soap_action, ns6__ModifyDoor) || this->recv_ModifyDoor(ns6__ModifyDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_ModifyDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_ModifyDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__ModifyDoor *ns6__ModifyDoor);
        /// Web service asynchronous operation 'recv_ModifyDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_ModifyDoor(_ns6__ModifyDoorResponse &ns6__ModifyDoorResponse);
        //
        /// Web service synchronous operation 'DeleteDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteDoor(_ns6__DeleteDoor *ns6__DeleteDoor, _ns6__DeleteDoorResponse &ns6__DeleteDoorResponse) { return this->DeleteDoor(NULL, NULL, ns6__DeleteDoor, ns6__DeleteDoorResponse); }
        /// Web service synchronous operation 'DeleteDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__DeleteDoor *ns6__DeleteDoor, _ns6__DeleteDoorResponse &ns6__DeleteDoorResponse) { return this->send_DeleteDoor(soap_endpoint_url, soap_action, ns6__DeleteDoor) || this->recv_DeleteDoor(ns6__DeleteDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__DeleteDoor *ns6__DeleteDoor);
        /// Web service asynchronous operation 'recv_DeleteDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteDoor(_ns6__DeleteDoorResponse &ns6__DeleteDoorResponse);
        //
        /// Web service synchronous operation 'GetDoorState' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorState(_ns6__GetDoorState *ns6__GetDoorState, _ns6__GetDoorStateResponse &ns6__GetDoorStateResponse) { return this->GetDoorState(NULL, NULL, ns6__GetDoorState, ns6__GetDoorStateResponse); }
        /// Web service synchronous operation 'GetDoorState' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetDoorState(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorState *ns6__GetDoorState, _ns6__GetDoorStateResponse &ns6__GetDoorStateResponse) { return this->send_GetDoorState(soap_endpoint_url, soap_action, ns6__GetDoorState) || this->recv_GetDoorState(ns6__GetDoorStateResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetDoorState' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetDoorState(const char *soap_endpoint_url, const char *soap_action, _ns6__GetDoorState *ns6__GetDoorState);
        /// Web service asynchronous operation 'recv_GetDoorState' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetDoorState(_ns6__GetDoorStateResponse &ns6__GetDoorStateResponse);
        //
        /// Web service synchronous operation 'AccessDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int AccessDoor(_ns6__AccessDoor *ns6__AccessDoor, _ns6__AccessDoorResponse &ns6__AccessDoorResponse) { return this->AccessDoor(NULL, NULL, ns6__AccessDoor, ns6__AccessDoorResponse); }
        /// Web service synchronous operation 'AccessDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int AccessDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__AccessDoor *ns6__AccessDoor, _ns6__AccessDoorResponse &ns6__AccessDoorResponse) { return this->send_AccessDoor(soap_endpoint_url, soap_action, ns6__AccessDoor) || this->recv_AccessDoor(ns6__AccessDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_AccessDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_AccessDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__AccessDoor *ns6__AccessDoor);
        /// Web service asynchronous operation 'recv_AccessDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_AccessDoor(_ns6__AccessDoorResponse &ns6__AccessDoorResponse);
        //
        /// Web service synchronous operation 'LockDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int LockDoor(_ns6__LockDoor *ns6__LockDoor, _ns6__LockDoorResponse &ns6__LockDoorResponse) { return this->LockDoor(NULL, NULL, ns6__LockDoor, ns6__LockDoorResponse); }
        /// Web service synchronous operation 'LockDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int LockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockDoor *ns6__LockDoor, _ns6__LockDoorResponse &ns6__LockDoorResponse) { return this->send_LockDoor(soap_endpoint_url, soap_action, ns6__LockDoor) || this->recv_LockDoor(ns6__LockDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_LockDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_LockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockDoor *ns6__LockDoor);
        /// Web service asynchronous operation 'recv_LockDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_LockDoor(_ns6__LockDoorResponse &ns6__LockDoorResponse);
        //
        /// Web service synchronous operation 'UnlockDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int UnlockDoor(_ns6__UnlockDoor *ns6__UnlockDoor, _ns6__UnlockDoorResponse &ns6__UnlockDoorResponse) { return this->UnlockDoor(NULL, NULL, ns6__UnlockDoor, ns6__UnlockDoorResponse); }
        /// Web service synchronous operation 'UnlockDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int UnlockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__UnlockDoor *ns6__UnlockDoor, _ns6__UnlockDoorResponse &ns6__UnlockDoorResponse) { return this->send_UnlockDoor(soap_endpoint_url, soap_action, ns6__UnlockDoor) || this->recv_UnlockDoor(ns6__UnlockDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_UnlockDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_UnlockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__UnlockDoor *ns6__UnlockDoor);
        /// Web service asynchronous operation 'recv_UnlockDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_UnlockDoor(_ns6__UnlockDoorResponse &ns6__UnlockDoorResponse);
        //
        /// Web service synchronous operation 'BlockDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int BlockDoor(_ns6__BlockDoor *ns6__BlockDoor, _ns6__BlockDoorResponse &ns6__BlockDoorResponse) { return this->BlockDoor(NULL, NULL, ns6__BlockDoor, ns6__BlockDoorResponse); }
        /// Web service synchronous operation 'BlockDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int BlockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__BlockDoor *ns6__BlockDoor, _ns6__BlockDoorResponse &ns6__BlockDoorResponse) { return this->send_BlockDoor(soap_endpoint_url, soap_action, ns6__BlockDoor) || this->recv_BlockDoor(ns6__BlockDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_BlockDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_BlockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__BlockDoor *ns6__BlockDoor);
        /// Web service asynchronous operation 'recv_BlockDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_BlockDoor(_ns6__BlockDoorResponse &ns6__BlockDoorResponse);
        //
        /// Web service synchronous operation 'LockDownDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int LockDownDoor(_ns6__LockDownDoor *ns6__LockDownDoor, _ns6__LockDownDoorResponse &ns6__LockDownDoorResponse) { return this->LockDownDoor(NULL, NULL, ns6__LockDownDoor, ns6__LockDownDoorResponse); }
        /// Web service synchronous operation 'LockDownDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int LockDownDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockDownDoor *ns6__LockDownDoor, _ns6__LockDownDoorResponse &ns6__LockDownDoorResponse) { return this->send_LockDownDoor(soap_endpoint_url, soap_action, ns6__LockDownDoor) || this->recv_LockDownDoor(ns6__LockDownDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_LockDownDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_LockDownDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockDownDoor *ns6__LockDownDoor);
        /// Web service asynchronous operation 'recv_LockDownDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_LockDownDoor(_ns6__LockDownDoorResponse &ns6__LockDownDoorResponse);
        //
        /// Web service synchronous operation 'LockDownReleaseDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int LockDownReleaseDoor(_ns6__LockDownReleaseDoor *ns6__LockDownReleaseDoor, _ns6__LockDownReleaseDoorResponse &ns6__LockDownReleaseDoorResponse) { return this->LockDownReleaseDoor(NULL, NULL, ns6__LockDownReleaseDoor, ns6__LockDownReleaseDoorResponse); }
        /// Web service synchronous operation 'LockDownReleaseDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int LockDownReleaseDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockDownReleaseDoor *ns6__LockDownReleaseDoor, _ns6__LockDownReleaseDoorResponse &ns6__LockDownReleaseDoorResponse) { return this->send_LockDownReleaseDoor(soap_endpoint_url, soap_action, ns6__LockDownReleaseDoor) || this->recv_LockDownReleaseDoor(ns6__LockDownReleaseDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_LockDownReleaseDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_LockDownReleaseDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockDownReleaseDoor *ns6__LockDownReleaseDoor);
        /// Web service asynchronous operation 'recv_LockDownReleaseDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_LockDownReleaseDoor(_ns6__LockDownReleaseDoorResponse &ns6__LockDownReleaseDoorResponse);
        //
        /// Web service synchronous operation 'LockOpenDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int LockOpenDoor(_ns6__LockOpenDoor *ns6__LockOpenDoor, _ns6__LockOpenDoorResponse &ns6__LockOpenDoorResponse) { return this->LockOpenDoor(NULL, NULL, ns6__LockOpenDoor, ns6__LockOpenDoorResponse); }
        /// Web service synchronous operation 'LockOpenDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int LockOpenDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockOpenDoor *ns6__LockOpenDoor, _ns6__LockOpenDoorResponse &ns6__LockOpenDoorResponse) { return this->send_LockOpenDoor(soap_endpoint_url, soap_action, ns6__LockOpenDoor) || this->recv_LockOpenDoor(ns6__LockOpenDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_LockOpenDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_LockOpenDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockOpenDoor *ns6__LockOpenDoor);
        /// Web service asynchronous operation 'recv_LockOpenDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_LockOpenDoor(_ns6__LockOpenDoorResponse &ns6__LockOpenDoorResponse);
        //
        /// Web service synchronous operation 'LockOpenReleaseDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int LockOpenReleaseDoor(_ns6__LockOpenReleaseDoor *ns6__LockOpenReleaseDoor, _ns6__LockOpenReleaseDoorResponse &ns6__LockOpenReleaseDoorResponse) { return this->LockOpenReleaseDoor(NULL, NULL, ns6__LockOpenReleaseDoor, ns6__LockOpenReleaseDoorResponse); }
        /// Web service synchronous operation 'LockOpenReleaseDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int LockOpenReleaseDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockOpenReleaseDoor *ns6__LockOpenReleaseDoor, _ns6__LockOpenReleaseDoorResponse &ns6__LockOpenReleaseDoorResponse) { return this->send_LockOpenReleaseDoor(soap_endpoint_url, soap_action, ns6__LockOpenReleaseDoor) || this->recv_LockOpenReleaseDoor(ns6__LockOpenReleaseDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_LockOpenReleaseDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_LockOpenReleaseDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__LockOpenReleaseDoor *ns6__LockOpenReleaseDoor);
        /// Web service asynchronous operation 'recv_LockOpenReleaseDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_LockOpenReleaseDoor(_ns6__LockOpenReleaseDoorResponse &ns6__LockOpenReleaseDoorResponse);
        //
        /// Web service synchronous operation 'DoubleLockDoor' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DoubleLockDoor(_ns6__DoubleLockDoor *ns6__DoubleLockDoor, _ns6__DoubleLockDoorResponse &ns6__DoubleLockDoorResponse) { return this->DoubleLockDoor(NULL, NULL, ns6__DoubleLockDoor, ns6__DoubleLockDoorResponse); }
        /// Web service synchronous operation 'DoubleLockDoor' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DoubleLockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__DoubleLockDoor *ns6__DoubleLockDoor, _ns6__DoubleLockDoorResponse &ns6__DoubleLockDoorResponse) { return this->send_DoubleLockDoor(soap_endpoint_url, soap_action, ns6__DoubleLockDoor) || this->recv_DoubleLockDoor(ns6__DoubleLockDoorResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DoubleLockDoor' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DoubleLockDoor(const char *soap_endpoint_url, const char *soap_action, _ns6__DoubleLockDoor *ns6__DoubleLockDoor);
        /// Web service asynchronous operation 'recv_DoubleLockDoor' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DoubleLockDoor(_ns6__DoubleLockDoorResponse &ns6__DoubleLockDoorResponse);
    };
#endif
