// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: producer.proto

#include "producer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pbproducer {
PROTOBUF_CONSTEXPR GetStreamInfoReq::GetStreamInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.producerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consumerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStreamInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamInfoReqDefaultTypeInternal() {}
  union {
    GetStreamInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamInfoReqDefaultTypeInternal _GetStreamInfoReq_default_instance_;
PROTOBUF_CONSTEXPR GetStreamDataReq::GetStreamDataReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.producerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consumerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStreamDataReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamDataReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamDataReqDefaultTypeInternal() {}
  union {
    GetStreamDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamDataReqDefaultTypeInternal _GetStreamDataReq_default_instance_;
PROTOBUF_CONSTEXPR GetStreamInfoRsp::GetStreamInfoRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.producerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consumerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.videocodingformat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ret_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.framerate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStreamInfoRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamInfoRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamInfoRspDefaultTypeInternal() {}
  union {
    GetStreamInfoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamInfoRspDefaultTypeInternal _GetStreamInfoRsp_default_instance_;
PROTOBUF_CONSTEXPR GetStreamDataRsp::GetStreamDataRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.framedata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ret_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.keyframe_)*/false
  , /*decltype(_impl_.frametype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStreamDataRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamDataRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamDataRspDefaultTypeInternal() {}
  union {
    GetStreamDataRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamDataRspDefaultTypeInternal _GetStreamDataRsp_default_instance_;
}  // namespace pbproducer
static ::_pb::Metadata file_level_metadata_producer_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_producer_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_producer_2eproto = nullptr;

const uint32_t TableStruct_producer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoReq, _impl_.producerid_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoReq, _impl_.consumerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataReq, _impl_.producerid_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataReq, _impl_.consumerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _impl_.producerid_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _impl_.consumerid_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _impl_.videocodingformat_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _impl_.framerate_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamInfoRsp, _impl_.ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataRsp, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataRsp, _impl_.keyframe_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataRsp, _impl_.frametype_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataRsp, _impl_.framedata_),
  PROTOBUF_FIELD_OFFSET(::pbproducer::GetStreamDataRsp, _impl_.ret_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pbproducer::GetStreamInfoReq)},
  { 8, -1, -1, sizeof(::pbproducer::GetStreamDataReq)},
  { 16, -1, -1, sizeof(::pbproducer::GetStreamInfoRsp)},
  { 29, -1, -1, sizeof(::pbproducer::GetStreamDataRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pbproducer::_GetStreamInfoReq_default_instance_._instance,
  &::pbproducer::_GetStreamDataReq_default_instance_._instance,
  &::pbproducer::_GetStreamInfoRsp_default_instance_._instance,
  &::pbproducer::_GetStreamDataRsp_default_instance_._instance,
};

const char descriptor_table_protodef_producer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016producer.proto\022\npbproducer\032\013media.prot"
  "o\":\n\020GetStreamInfoReq\022\022\n\nProducerId\030\001 \001("
  "\t\022\022\n\nConsumerId\030\002 \001(\t\":\n\020GetStreamDataRe"
  "q\022\022\n\nProducerId\030\001 \001(\t\022\022\n\nConsumerId\030\002 \001("
  "\t\"\250\001\n\020GetStreamInfoRsp\022\022\n\nProducerId\030\001 \001"
  "(\t\022\022\n\nConsumerId\030\002 \001(\t\022\031\n\021VideoCodingFor"
  "mat\030\003 \001(\t\022\r\n\005width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005"
  "\022\021\n\tFrameRate\030\006 \001(\005\022\037\n\003ret\030\007 \001(\0132\022.pbmed"
  "ia.ComReturn\"~\n\020GetStreamDataRsp\022\021\n\tTime"
  "stamp\030\001 \001(\003\022\020\n\010KeyFrame\030\002 \001(\010\022\021\n\tFrameTy"
  "pe\030\003 \001(\005\022\021\n\tFrameData\030\004 \001(\014\022\037\n\003ret\030\005 \001(\013"
  "2\022.pbmedia.ComReturn2\252\001\n\010Producer\022M\n\rGet"
  "StreamInfo\022\034.pbproducer.GetStreamInfoReq"
  "\032\034.pbproducer.GetStreamInfoRsp\"\000\022O\n\rGetS"
  "treamData\022\034.pbproducer.GetStreamDataReq\032"
  "\034.pbproducer.GetStreamDataRsp\"\0000\001B\026Z\024blu"
  "eplane/pbproducerb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_producer_2eproto_deps[1] = {
  &::descriptor_table_media_2eproto,
};
static ::_pbi::once_flag descriptor_table_producer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_producer_2eproto = {
    false, false, 665, descriptor_table_protodef_producer_2eproto,
    "producer.proto",
    &descriptor_table_producer_2eproto_once, descriptor_table_producer_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_producer_2eproto::offsets,
    file_level_metadata_producer_2eproto, file_level_enum_descriptors_producer_2eproto,
    file_level_service_descriptors_producer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_producer_2eproto_getter() {
  return &descriptor_table_producer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_producer_2eproto(&descriptor_table_producer_2eproto);
namespace pbproducer {

// ===================================================================

class GetStreamInfoReq::_Internal {
 public:
};

GetStreamInfoReq::GetStreamInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbproducer.GetStreamInfoReq)
}
GetStreamInfoReq::GetStreamInfoReq(const GetStreamInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStreamInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.producerid_){}
    , decltype(_impl_.consumerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.producerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producerid().empty()) {
    _this->_impl_.producerid_.Set(from._internal_producerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consumerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumerid().empty()) {
    _this->_impl_.consumerid_.Set(from._internal_consumerid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbproducer.GetStreamInfoReq)
}

inline void GetStreamInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.producerid_){}
    , decltype(_impl_.consumerid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.producerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consumerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStreamInfoReq::~GetStreamInfoReq() {
  // @@protoc_insertion_point(destructor:pbproducer.GetStreamInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStreamInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.producerid_.Destroy();
  _impl_.consumerid_.Destroy();
}

void GetStreamInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStreamInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pbproducer.GetStreamInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.producerid_.ClearToEmpty();
  _impl_.consumerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ProducerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_producerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbproducer.GetStreamInfoReq.ProducerId"));
        } else
          goto handle_unusual;
        continue;
      // string ConsumerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_consumerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbproducer.GetStreamInfoReq.ConsumerId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStreamInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbproducer.GetStreamInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ProducerId = 1;
  if (!this->_internal_producerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_producerid().data(), static_cast<int>(this->_internal_producerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbproducer.GetStreamInfoReq.ProducerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_producerid(), target);
  }

  // string ConsumerId = 2;
  if (!this->_internal_consumerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumerid().data(), static_cast<int>(this->_internal_consumerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbproducer.GetStreamInfoReq.ConsumerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_consumerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbproducer.GetStreamInfoReq)
  return target;
}

size_t GetStreamInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbproducer.GetStreamInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProducerId = 1;
  if (!this->_internal_producerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_producerid());
  }

  // string ConsumerId = 2;
  if (!this->_internal_consumerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStreamInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStreamInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStreamInfoReq::GetClassData() const { return &_class_data_; }


void GetStreamInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStreamInfoReq*>(&to_msg);
  auto& from = static_cast<const GetStreamInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbproducer.GetStreamInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_producerid().empty()) {
    _this->_internal_set_producerid(from._internal_producerid());
  }
  if (!from._internal_consumerid().empty()) {
    _this->_internal_set_consumerid(from._internal_consumerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStreamInfoReq::CopyFrom(const GetStreamInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbproducer.GetStreamInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamInfoReq::IsInitialized() const {
  return true;
}

void GetStreamInfoReq::InternalSwap(GetStreamInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producerid_, lhs_arena,
      &other->_impl_.producerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consumerid_, lhs_arena,
      &other->_impl_.consumerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_producer_2eproto_getter, &descriptor_table_producer_2eproto_once,
      file_level_metadata_producer_2eproto[0]);
}

// ===================================================================

class GetStreamDataReq::_Internal {
 public:
};

GetStreamDataReq::GetStreamDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbproducer.GetStreamDataReq)
}
GetStreamDataReq::GetStreamDataReq(const GetStreamDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStreamDataReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.producerid_){}
    , decltype(_impl_.consumerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.producerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producerid().empty()) {
    _this->_impl_.producerid_.Set(from._internal_producerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consumerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumerid().empty()) {
    _this->_impl_.consumerid_.Set(from._internal_consumerid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbproducer.GetStreamDataReq)
}

inline void GetStreamDataReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.producerid_){}
    , decltype(_impl_.consumerid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.producerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consumerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStreamDataReq::~GetStreamDataReq() {
  // @@protoc_insertion_point(destructor:pbproducer.GetStreamDataReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStreamDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.producerid_.Destroy();
  _impl_.consumerid_.Destroy();
}

void GetStreamDataReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStreamDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pbproducer.GetStreamDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.producerid_.ClearToEmpty();
  _impl_.consumerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamDataReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ProducerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_producerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbproducer.GetStreamDataReq.ProducerId"));
        } else
          goto handle_unusual;
        continue;
      // string ConsumerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_consumerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbproducer.GetStreamDataReq.ConsumerId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStreamDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbproducer.GetStreamDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ProducerId = 1;
  if (!this->_internal_producerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_producerid().data(), static_cast<int>(this->_internal_producerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbproducer.GetStreamDataReq.ProducerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_producerid(), target);
  }

  // string ConsumerId = 2;
  if (!this->_internal_consumerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumerid().data(), static_cast<int>(this->_internal_consumerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbproducer.GetStreamDataReq.ConsumerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_consumerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbproducer.GetStreamDataReq)
  return target;
}

size_t GetStreamDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbproducer.GetStreamDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProducerId = 1;
  if (!this->_internal_producerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_producerid());
  }

  // string ConsumerId = 2;
  if (!this->_internal_consumerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStreamDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStreamDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStreamDataReq::GetClassData() const { return &_class_data_; }


void GetStreamDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStreamDataReq*>(&to_msg);
  auto& from = static_cast<const GetStreamDataReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbproducer.GetStreamDataReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_producerid().empty()) {
    _this->_internal_set_producerid(from._internal_producerid());
  }
  if (!from._internal_consumerid().empty()) {
    _this->_internal_set_consumerid(from._internal_consumerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStreamDataReq::CopyFrom(const GetStreamDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbproducer.GetStreamDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamDataReq::IsInitialized() const {
  return true;
}

void GetStreamDataReq::InternalSwap(GetStreamDataReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producerid_, lhs_arena,
      &other->_impl_.producerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consumerid_, lhs_arena,
      &other->_impl_.consumerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamDataReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_producer_2eproto_getter, &descriptor_table_producer_2eproto_once,
      file_level_metadata_producer_2eproto[1]);
}

// ===================================================================

class GetStreamInfoRsp::_Internal {
 public:
  static const ::pbmedia::ComReturn& ret(const GetStreamInfoRsp* msg);
};

const ::pbmedia::ComReturn&
GetStreamInfoRsp::_Internal::ret(const GetStreamInfoRsp* msg) {
  return *msg->_impl_.ret_;
}
void GetStreamInfoRsp::clear_ret() {
  if (GetArenaForAllocation() == nullptr && _impl_.ret_ != nullptr) {
    delete _impl_.ret_;
  }
  _impl_.ret_ = nullptr;
}
GetStreamInfoRsp::GetStreamInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbproducer.GetStreamInfoRsp)
}
GetStreamInfoRsp::GetStreamInfoRsp(const GetStreamInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStreamInfoRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.producerid_){}
    , decltype(_impl_.consumerid_){}
    , decltype(_impl_.videocodingformat_){}
    , decltype(_impl_.ret_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.framerate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.producerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producerid().empty()) {
    _this->_impl_.producerid_.Set(from._internal_producerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consumerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumerid().empty()) {
    _this->_impl_.consumerid_.Set(from._internal_consumerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.videocodingformat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.videocodingformat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_videocodingformat().empty()) {
    _this->_impl_.videocodingformat_.Set(from._internal_videocodingformat(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ret()) {
    _this->_impl_.ret_ = new ::pbmedia::ComReturn(*from._impl_.ret_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.framerate_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.framerate_));
  // @@protoc_insertion_point(copy_constructor:pbproducer.GetStreamInfoRsp)
}

inline void GetStreamInfoRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.producerid_){}
    , decltype(_impl_.consumerid_){}
    , decltype(_impl_.videocodingformat_){}
    , decltype(_impl_.ret_){nullptr}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.framerate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.producerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consumerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.videocodingformat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.videocodingformat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStreamInfoRsp::~GetStreamInfoRsp() {
  // @@protoc_insertion_point(destructor:pbproducer.GetStreamInfoRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStreamInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.producerid_.Destroy();
  _impl_.consumerid_.Destroy();
  _impl_.videocodingformat_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ret_;
}

void GetStreamInfoRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStreamInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pbproducer.GetStreamInfoRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.producerid_.ClearToEmpty();
  _impl_.consumerid_.ClearToEmpty();
  _impl_.videocodingformat_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ret_ != nullptr) {
    delete _impl_.ret_;
  }
  _impl_.ret_ = nullptr;
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.framerate_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.framerate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamInfoRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ProducerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_producerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbproducer.GetStreamInfoRsp.ProducerId"));
        } else
          goto handle_unusual;
        continue;
      // string ConsumerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_consumerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbproducer.GetStreamInfoRsp.ConsumerId"));
        } else
          goto handle_unusual;
        continue;
      // string VideoCodingFormat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_videocodingformat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbproducer.GetStreamInfoRsp.VideoCodingFormat"));
        } else
          goto handle_unusual;
        continue;
      // int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FrameRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbmedia.ComReturn ret = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ret(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStreamInfoRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbproducer.GetStreamInfoRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ProducerId = 1;
  if (!this->_internal_producerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_producerid().data(), static_cast<int>(this->_internal_producerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbproducer.GetStreamInfoRsp.ProducerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_producerid(), target);
  }

  // string ConsumerId = 2;
  if (!this->_internal_consumerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumerid().data(), static_cast<int>(this->_internal_consumerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbproducer.GetStreamInfoRsp.ConsumerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_consumerid(), target);
  }

  // string VideoCodingFormat = 3;
  if (!this->_internal_videocodingformat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_videocodingformat().data(), static_cast<int>(this->_internal_videocodingformat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbproducer.GetStreamInfoRsp.VideoCodingFormat");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_videocodingformat(), target);
  }

  // int32 width = 4;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // int32 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  // int32 FrameRate = 6;
  if (this->_internal_framerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_framerate(), target);
  }

  // .pbmedia.ComReturn ret = 7;
  if (this->_internal_has_ret()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ret(this),
        _Internal::ret(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbproducer.GetStreamInfoRsp)
  return target;
}

size_t GetStreamInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbproducer.GetStreamInfoRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProducerId = 1;
  if (!this->_internal_producerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_producerid());
  }

  // string ConsumerId = 2;
  if (!this->_internal_consumerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumerid());
  }

  // string VideoCodingFormat = 3;
  if (!this->_internal_videocodingformat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_videocodingformat());
  }

  // .pbmedia.ComReturn ret = 7;
  if (this->_internal_has_ret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ret_);
  }

  // int32 width = 4;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 FrameRate = 6;
  if (this->_internal_framerate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_framerate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStreamInfoRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStreamInfoRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStreamInfoRsp::GetClassData() const { return &_class_data_; }


void GetStreamInfoRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStreamInfoRsp*>(&to_msg);
  auto& from = static_cast<const GetStreamInfoRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbproducer.GetStreamInfoRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_producerid().empty()) {
    _this->_internal_set_producerid(from._internal_producerid());
  }
  if (!from._internal_consumerid().empty()) {
    _this->_internal_set_consumerid(from._internal_consumerid());
  }
  if (!from._internal_videocodingformat().empty()) {
    _this->_internal_set_videocodingformat(from._internal_videocodingformat());
  }
  if (from._internal_has_ret()) {
    _this->_internal_mutable_ret()->::pbmedia::ComReturn::MergeFrom(
        from._internal_ret());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_framerate() != 0) {
    _this->_internal_set_framerate(from._internal_framerate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStreamInfoRsp::CopyFrom(const GetStreamInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbproducer.GetStreamInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamInfoRsp::IsInitialized() const {
  return true;
}

void GetStreamInfoRsp::InternalSwap(GetStreamInfoRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producerid_, lhs_arena,
      &other->_impl_.producerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consumerid_, lhs_arena,
      &other->_impl_.consumerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.videocodingformat_, lhs_arena,
      &other->_impl_.videocodingformat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStreamInfoRsp, _impl_.framerate_)
      + sizeof(GetStreamInfoRsp::_impl_.framerate_)
      - PROTOBUF_FIELD_OFFSET(GetStreamInfoRsp, _impl_.ret_)>(
          reinterpret_cast<char*>(&_impl_.ret_),
          reinterpret_cast<char*>(&other->_impl_.ret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamInfoRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_producer_2eproto_getter, &descriptor_table_producer_2eproto_once,
      file_level_metadata_producer_2eproto[2]);
}

// ===================================================================

class GetStreamDataRsp::_Internal {
 public:
  static const ::pbmedia::ComReturn& ret(const GetStreamDataRsp* msg);
};

const ::pbmedia::ComReturn&
GetStreamDataRsp::_Internal::ret(const GetStreamDataRsp* msg) {
  return *msg->_impl_.ret_;
}
void GetStreamDataRsp::clear_ret() {
  if (GetArenaForAllocation() == nullptr && _impl_.ret_ != nullptr) {
    delete _impl_.ret_;
  }
  _impl_.ret_ = nullptr;
}
GetStreamDataRsp::GetStreamDataRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbproducer.GetStreamDataRsp)
}
GetStreamDataRsp::GetStreamDataRsp(const GetStreamDataRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStreamDataRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.framedata_){}
    , decltype(_impl_.ret_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.keyframe_){}
    , decltype(_impl_.frametype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.framedata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.framedata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_framedata().empty()) {
    _this->_impl_.framedata_.Set(from._internal_framedata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ret()) {
    _this->_impl_.ret_ = new ::pbmedia::ComReturn(*from._impl_.ret_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frametype_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frametype_));
  // @@protoc_insertion_point(copy_constructor:pbproducer.GetStreamDataRsp)
}

inline void GetStreamDataRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.framedata_){}
    , decltype(_impl_.ret_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.keyframe_){false}
    , decltype(_impl_.frametype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.framedata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.framedata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStreamDataRsp::~GetStreamDataRsp() {
  // @@protoc_insertion_point(destructor:pbproducer.GetStreamDataRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStreamDataRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.framedata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ret_;
}

void GetStreamDataRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStreamDataRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:pbproducer.GetStreamDataRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.framedata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ret_ != nullptr) {
    delete _impl_.ret_;
  }
  _impl_.ret_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frametype_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frametype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamDataRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool KeyFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.keyframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FrameType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.frametype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes FrameData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_framedata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbmedia.ComReturn ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ret(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStreamDataRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbproducer.GetStreamDataRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // bool KeyFrame = 2;
  if (this->_internal_keyframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_keyframe(), target);
  }

  // int32 FrameType = 3;
  if (this->_internal_frametype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_frametype(), target);
  }

  // bytes FrameData = 4;
  if (!this->_internal_framedata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_framedata(), target);
  }

  // .pbmedia.ComReturn ret = 5;
  if (this->_internal_has_ret()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ret(this),
        _Internal::ret(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbproducer.GetStreamDataRsp)
  return target;
}

size_t GetStreamDataRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbproducer.GetStreamDataRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes FrameData = 4;
  if (!this->_internal_framedata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_framedata());
  }

  // .pbmedia.ComReturn ret = 5;
  if (this->_internal_has_ret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ret_);
  }

  // int64 Timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // bool KeyFrame = 2;
  if (this->_internal_keyframe() != 0) {
    total_size += 1 + 1;
  }

  // int32 FrameType = 3;
  if (this->_internal_frametype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frametype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStreamDataRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStreamDataRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStreamDataRsp::GetClassData() const { return &_class_data_; }


void GetStreamDataRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStreamDataRsp*>(&to_msg);
  auto& from = static_cast<const GetStreamDataRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbproducer.GetStreamDataRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_framedata().empty()) {
    _this->_internal_set_framedata(from._internal_framedata());
  }
  if (from._internal_has_ret()) {
    _this->_internal_mutable_ret()->::pbmedia::ComReturn::MergeFrom(
        from._internal_ret());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_keyframe() != 0) {
    _this->_internal_set_keyframe(from._internal_keyframe());
  }
  if (from._internal_frametype() != 0) {
    _this->_internal_set_frametype(from._internal_frametype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStreamDataRsp::CopyFrom(const GetStreamDataRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbproducer.GetStreamDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamDataRsp::IsInitialized() const {
  return true;
}

void GetStreamDataRsp::InternalSwap(GetStreamDataRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.framedata_, lhs_arena,
      &other->_impl_.framedata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStreamDataRsp, _impl_.frametype_)
      + sizeof(GetStreamDataRsp::_impl_.frametype_)
      - PROTOBUF_FIELD_OFFSET(GetStreamDataRsp, _impl_.ret_)>(
          reinterpret_cast<char*>(&_impl_.ret_),
          reinterpret_cast<char*>(&other->_impl_.ret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamDataRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_producer_2eproto_getter, &descriptor_table_producer_2eproto_once,
      file_level_metadata_producer_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbproducer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbproducer::GetStreamInfoReq*
Arena::CreateMaybeMessage< ::pbproducer::GetStreamInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbproducer::GetStreamInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pbproducer::GetStreamDataReq*
Arena::CreateMaybeMessage< ::pbproducer::GetStreamDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbproducer::GetStreamDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pbproducer::GetStreamInfoRsp*
Arena::CreateMaybeMessage< ::pbproducer::GetStreamInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbproducer::GetStreamInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::pbproducer::GetStreamDataRsp*
Arena::CreateMaybeMessage< ::pbproducer::GetStreamDataRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbproducer::GetStreamDataRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
