// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: producer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_producer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_producer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "media.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_producer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_producer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_producer_2eproto;
namespace pbproducer {
class GetStreamDataReq;
struct GetStreamDataReqDefaultTypeInternal;
extern GetStreamDataReqDefaultTypeInternal _GetStreamDataReq_default_instance_;
class GetStreamDataRsp;
struct GetStreamDataRspDefaultTypeInternal;
extern GetStreamDataRspDefaultTypeInternal _GetStreamDataRsp_default_instance_;
class GetStreamInfoReq;
struct GetStreamInfoReqDefaultTypeInternal;
extern GetStreamInfoReqDefaultTypeInternal _GetStreamInfoReq_default_instance_;
class GetStreamInfoRsp;
struct GetStreamInfoRspDefaultTypeInternal;
extern GetStreamInfoRspDefaultTypeInternal _GetStreamInfoRsp_default_instance_;
}  // namespace pbproducer
PROTOBUF_NAMESPACE_OPEN
template<> ::pbproducer::GetStreamDataReq* Arena::CreateMaybeMessage<::pbproducer::GetStreamDataReq>(Arena*);
template<> ::pbproducer::GetStreamDataRsp* Arena::CreateMaybeMessage<::pbproducer::GetStreamDataRsp>(Arena*);
template<> ::pbproducer::GetStreamInfoReq* Arena::CreateMaybeMessage<::pbproducer::GetStreamInfoReq>(Arena*);
template<> ::pbproducer::GetStreamInfoRsp* Arena::CreateMaybeMessage<::pbproducer::GetStreamInfoRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbproducer {

// ===================================================================

class GetStreamInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbproducer.GetStreamInfoReq) */ {
 public:
  inline GetStreamInfoReq() : GetStreamInfoReq(nullptr) {}
  ~GetStreamInfoReq() override;
  explicit PROTOBUF_CONSTEXPR GetStreamInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStreamInfoReq(const GetStreamInfoReq& from);
  GetStreamInfoReq(GetStreamInfoReq&& from) noexcept
    : GetStreamInfoReq() {
    *this = ::std::move(from);
  }

  inline GetStreamInfoReq& operator=(const GetStreamInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamInfoReq& operator=(GetStreamInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetStreamInfoReq*>(
               &_GetStreamInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetStreamInfoReq& a, GetStreamInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStreamInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStreamInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStreamInfoReq& from) {
    GetStreamInfoReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbproducer.GetStreamInfoReq";
  }
  protected:
  explicit GetStreamInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerIdFieldNumber = 1,
    kConsumerIdFieldNumber = 2,
  };
  // string ProducerId = 1;
  void clear_producerid();
  const std::string& producerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producerid();
  PROTOBUF_NODISCARD std::string* release_producerid();
  void set_allocated_producerid(std::string* producerid);
  private:
  const std::string& _internal_producerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producerid(const std::string& value);
  std::string* _internal_mutable_producerid();
  public:

  // string ConsumerId = 2;
  void clear_consumerid();
  const std::string& consumerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumerid();
  PROTOBUF_NODISCARD std::string* release_consumerid();
  void set_allocated_consumerid(std::string* consumerid);
  private:
  const std::string& _internal_consumerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumerid(const std::string& value);
  std::string* _internal_mutable_consumerid();
  public:

  // @@protoc_insertion_point(class_scope:pbproducer.GetStreamInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_producer_2eproto;
};
// -------------------------------------------------------------------

class GetStreamDataReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbproducer.GetStreamDataReq) */ {
 public:
  inline GetStreamDataReq() : GetStreamDataReq(nullptr) {}
  ~GetStreamDataReq() override;
  explicit PROTOBUF_CONSTEXPR GetStreamDataReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStreamDataReq(const GetStreamDataReq& from);
  GetStreamDataReq(GetStreamDataReq&& from) noexcept
    : GetStreamDataReq() {
    *this = ::std::move(from);
  }

  inline GetStreamDataReq& operator=(const GetStreamDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamDataReq& operator=(GetStreamDataReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamDataReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamDataReq* internal_default_instance() {
    return reinterpret_cast<const GetStreamDataReq*>(
               &_GetStreamDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetStreamDataReq& a, GetStreamDataReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamDataReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamDataReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStreamDataReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStreamDataReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStreamDataReq& from) {
    GetStreamDataReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamDataReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbproducer.GetStreamDataReq";
  }
  protected:
  explicit GetStreamDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerIdFieldNumber = 1,
    kConsumerIdFieldNumber = 2,
  };
  // string ProducerId = 1;
  void clear_producerid();
  const std::string& producerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producerid();
  PROTOBUF_NODISCARD std::string* release_producerid();
  void set_allocated_producerid(std::string* producerid);
  private:
  const std::string& _internal_producerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producerid(const std::string& value);
  std::string* _internal_mutable_producerid();
  public:

  // string ConsumerId = 2;
  void clear_consumerid();
  const std::string& consumerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumerid();
  PROTOBUF_NODISCARD std::string* release_consumerid();
  void set_allocated_consumerid(std::string* consumerid);
  private:
  const std::string& _internal_consumerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumerid(const std::string& value);
  std::string* _internal_mutable_consumerid();
  public:

  // @@protoc_insertion_point(class_scope:pbproducer.GetStreamDataReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_producer_2eproto;
};
// -------------------------------------------------------------------

class GetStreamInfoRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbproducer.GetStreamInfoRsp) */ {
 public:
  inline GetStreamInfoRsp() : GetStreamInfoRsp(nullptr) {}
  ~GetStreamInfoRsp() override;
  explicit PROTOBUF_CONSTEXPR GetStreamInfoRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStreamInfoRsp(const GetStreamInfoRsp& from);
  GetStreamInfoRsp(GetStreamInfoRsp&& from) noexcept
    : GetStreamInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetStreamInfoRsp& operator=(const GetStreamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamInfoRsp& operator=(GetStreamInfoRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamInfoRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamInfoRsp*>(
               &_GetStreamInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetStreamInfoRsp& a, GetStreamInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamInfoRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStreamInfoRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStreamInfoRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStreamInfoRsp& from) {
    GetStreamInfoRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamInfoRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbproducer.GetStreamInfoRsp";
  }
  protected:
  explicit GetStreamInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerIdFieldNumber = 1,
    kConsumerIdFieldNumber = 2,
    kVideoCodingFormatFieldNumber = 3,
    kRetFieldNumber = 7,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kFrameRateFieldNumber = 6,
  };
  // string ProducerId = 1;
  void clear_producerid();
  const std::string& producerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producerid();
  PROTOBUF_NODISCARD std::string* release_producerid();
  void set_allocated_producerid(std::string* producerid);
  private:
  const std::string& _internal_producerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producerid(const std::string& value);
  std::string* _internal_mutable_producerid();
  public:

  // string ConsumerId = 2;
  void clear_consumerid();
  const std::string& consumerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumerid();
  PROTOBUF_NODISCARD std::string* release_consumerid();
  void set_allocated_consumerid(std::string* consumerid);
  private:
  const std::string& _internal_consumerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumerid(const std::string& value);
  std::string* _internal_mutable_consumerid();
  public:

  // string VideoCodingFormat = 3;
  void clear_videocodingformat();
  const std::string& videocodingformat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_videocodingformat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_videocodingformat();
  PROTOBUF_NODISCARD std::string* release_videocodingformat();
  void set_allocated_videocodingformat(std::string* videocodingformat);
  private:
  const std::string& _internal_videocodingformat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_videocodingformat(const std::string& value);
  std::string* _internal_mutable_videocodingformat();
  public:

  // .pbmedia.ComReturn ret = 7;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const ::pbmedia::ComReturn& ret() const;
  PROTOBUF_NODISCARD ::pbmedia::ComReturn* release_ret();
  ::pbmedia::ComReturn* mutable_ret();
  void set_allocated_ret(::pbmedia::ComReturn* ret);
  private:
  const ::pbmedia::ComReturn& _internal_ret() const;
  ::pbmedia::ComReturn* _internal_mutable_ret();
  public:
  void unsafe_arena_set_allocated_ret(
      ::pbmedia::ComReturn* ret);
  ::pbmedia::ComReturn* unsafe_arena_release_ret();

  // int32 width = 4;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 5;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 FrameRate = 6;
  void clear_framerate();
  int32_t framerate() const;
  void set_framerate(int32_t value);
  private:
  int32_t _internal_framerate() const;
  void _internal_set_framerate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbproducer.GetStreamInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr videocodingformat_;
    ::pbmedia::ComReturn* ret_;
    int32_t width_;
    int32_t height_;
    int32_t framerate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_producer_2eproto;
};
// -------------------------------------------------------------------

class GetStreamDataRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbproducer.GetStreamDataRsp) */ {
 public:
  inline GetStreamDataRsp() : GetStreamDataRsp(nullptr) {}
  ~GetStreamDataRsp() override;
  explicit PROTOBUF_CONSTEXPR GetStreamDataRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStreamDataRsp(const GetStreamDataRsp& from);
  GetStreamDataRsp(GetStreamDataRsp&& from) noexcept
    : GetStreamDataRsp() {
    *this = ::std::move(from);
  }

  inline GetStreamDataRsp& operator=(const GetStreamDataRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamDataRsp& operator=(GetStreamDataRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamDataRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamDataRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamDataRsp*>(
               &_GetStreamDataRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStreamDataRsp& a, GetStreamDataRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamDataRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamDataRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamDataRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStreamDataRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStreamDataRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStreamDataRsp& from) {
    GetStreamDataRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamDataRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbproducer.GetStreamDataRsp";
  }
  protected:
  explicit GetStreamDataRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameDataFieldNumber = 4,
    kRetFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kKeyFrameFieldNumber = 2,
    kFrameTypeFieldNumber = 3,
  };
  // bytes FrameData = 4;
  void clear_framedata();
  const std::string& framedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_framedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_framedata();
  PROTOBUF_NODISCARD std::string* release_framedata();
  void set_allocated_framedata(std::string* framedata);
  private:
  const std::string& _internal_framedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_framedata(const std::string& value);
  std::string* _internal_mutable_framedata();
  public:

  // .pbmedia.ComReturn ret = 5;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const ::pbmedia::ComReturn& ret() const;
  PROTOBUF_NODISCARD ::pbmedia::ComReturn* release_ret();
  ::pbmedia::ComReturn* mutable_ret();
  void set_allocated_ret(::pbmedia::ComReturn* ret);
  private:
  const ::pbmedia::ComReturn& _internal_ret() const;
  ::pbmedia::ComReturn* _internal_mutable_ret();
  public:
  void unsafe_arena_set_allocated_ret(
      ::pbmedia::ComReturn* ret);
  ::pbmedia::ComReturn* unsafe_arena_release_ret();

  // int64 Timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // bool KeyFrame = 2;
  void clear_keyframe();
  bool keyframe() const;
  void set_keyframe(bool value);
  private:
  bool _internal_keyframe() const;
  void _internal_set_keyframe(bool value);
  public:

  // int32 FrameType = 3;
  void clear_frametype();
  int32_t frametype() const;
  void set_frametype(int32_t value);
  private:
  int32_t _internal_frametype() const;
  void _internal_set_frametype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbproducer.GetStreamDataRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr framedata_;
    ::pbmedia::ComReturn* ret_;
    int64_t timestamp_;
    bool keyframe_;
    int32_t frametype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_producer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetStreamInfoReq

// string ProducerId = 1;
inline void GetStreamInfoReq::clear_producerid() {
  _impl_.producerid_.ClearToEmpty();
}
inline const std::string& GetStreamInfoReq::producerid() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoReq.ProducerId)
  return _internal_producerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamInfoReq::set_producerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.producerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoReq.ProducerId)
}
inline std::string* GetStreamInfoReq::mutable_producerid() {
  std::string* _s = _internal_mutable_producerid();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamInfoReq.ProducerId)
  return _s;
}
inline const std::string& GetStreamInfoReq::_internal_producerid() const {
  return _impl_.producerid_.Get();
}
inline void GetStreamInfoReq::_internal_set_producerid(const std::string& value) {
  
  _impl_.producerid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamInfoReq::_internal_mutable_producerid() {
  
  return _impl_.producerid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamInfoReq::release_producerid() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamInfoReq.ProducerId)
  return _impl_.producerid_.Release();
}
inline void GetStreamInfoReq::set_allocated_producerid(std::string* producerid) {
  if (producerid != nullptr) {
    
  } else {
    
  }
  _impl_.producerid_.SetAllocated(producerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.producerid_.IsDefault()) {
    _impl_.producerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamInfoReq.ProducerId)
}

// string ConsumerId = 2;
inline void GetStreamInfoReq::clear_consumerid() {
  _impl_.consumerid_.ClearToEmpty();
}
inline const std::string& GetStreamInfoReq::consumerid() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoReq.ConsumerId)
  return _internal_consumerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamInfoReq::set_consumerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoReq.ConsumerId)
}
inline std::string* GetStreamInfoReq::mutable_consumerid() {
  std::string* _s = _internal_mutable_consumerid();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamInfoReq.ConsumerId)
  return _s;
}
inline const std::string& GetStreamInfoReq::_internal_consumerid() const {
  return _impl_.consumerid_.Get();
}
inline void GetStreamInfoReq::_internal_set_consumerid(const std::string& value) {
  
  _impl_.consumerid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamInfoReq::_internal_mutable_consumerid() {
  
  return _impl_.consumerid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamInfoReq::release_consumerid() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamInfoReq.ConsumerId)
  return _impl_.consumerid_.Release();
}
inline void GetStreamInfoReq::set_allocated_consumerid(std::string* consumerid) {
  if (consumerid != nullptr) {
    
  } else {
    
  }
  _impl_.consumerid_.SetAllocated(consumerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumerid_.IsDefault()) {
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamInfoReq.ConsumerId)
}

// -------------------------------------------------------------------

// GetStreamDataReq

// string ProducerId = 1;
inline void GetStreamDataReq::clear_producerid() {
  _impl_.producerid_.ClearToEmpty();
}
inline const std::string& GetStreamDataReq::producerid() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamDataReq.ProducerId)
  return _internal_producerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamDataReq::set_producerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.producerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamDataReq.ProducerId)
}
inline std::string* GetStreamDataReq::mutable_producerid() {
  std::string* _s = _internal_mutable_producerid();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamDataReq.ProducerId)
  return _s;
}
inline const std::string& GetStreamDataReq::_internal_producerid() const {
  return _impl_.producerid_.Get();
}
inline void GetStreamDataReq::_internal_set_producerid(const std::string& value) {
  
  _impl_.producerid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamDataReq::_internal_mutable_producerid() {
  
  return _impl_.producerid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamDataReq::release_producerid() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamDataReq.ProducerId)
  return _impl_.producerid_.Release();
}
inline void GetStreamDataReq::set_allocated_producerid(std::string* producerid) {
  if (producerid != nullptr) {
    
  } else {
    
  }
  _impl_.producerid_.SetAllocated(producerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.producerid_.IsDefault()) {
    _impl_.producerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamDataReq.ProducerId)
}

// string ConsumerId = 2;
inline void GetStreamDataReq::clear_consumerid() {
  _impl_.consumerid_.ClearToEmpty();
}
inline const std::string& GetStreamDataReq::consumerid() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamDataReq.ConsumerId)
  return _internal_consumerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamDataReq::set_consumerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamDataReq.ConsumerId)
}
inline std::string* GetStreamDataReq::mutable_consumerid() {
  std::string* _s = _internal_mutable_consumerid();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamDataReq.ConsumerId)
  return _s;
}
inline const std::string& GetStreamDataReq::_internal_consumerid() const {
  return _impl_.consumerid_.Get();
}
inline void GetStreamDataReq::_internal_set_consumerid(const std::string& value) {
  
  _impl_.consumerid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamDataReq::_internal_mutable_consumerid() {
  
  return _impl_.consumerid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamDataReq::release_consumerid() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamDataReq.ConsumerId)
  return _impl_.consumerid_.Release();
}
inline void GetStreamDataReq::set_allocated_consumerid(std::string* consumerid) {
  if (consumerid != nullptr) {
    
  } else {
    
  }
  _impl_.consumerid_.SetAllocated(consumerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumerid_.IsDefault()) {
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamDataReq.ConsumerId)
}

// -------------------------------------------------------------------

// GetStreamInfoRsp

// string ProducerId = 1;
inline void GetStreamInfoRsp::clear_producerid() {
  _impl_.producerid_.ClearToEmpty();
}
inline const std::string& GetStreamInfoRsp::producerid() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoRsp.ProducerId)
  return _internal_producerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamInfoRsp::set_producerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.producerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoRsp.ProducerId)
}
inline std::string* GetStreamInfoRsp::mutable_producerid() {
  std::string* _s = _internal_mutable_producerid();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamInfoRsp.ProducerId)
  return _s;
}
inline const std::string& GetStreamInfoRsp::_internal_producerid() const {
  return _impl_.producerid_.Get();
}
inline void GetStreamInfoRsp::_internal_set_producerid(const std::string& value) {
  
  _impl_.producerid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamInfoRsp::_internal_mutable_producerid() {
  
  return _impl_.producerid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamInfoRsp::release_producerid() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamInfoRsp.ProducerId)
  return _impl_.producerid_.Release();
}
inline void GetStreamInfoRsp::set_allocated_producerid(std::string* producerid) {
  if (producerid != nullptr) {
    
  } else {
    
  }
  _impl_.producerid_.SetAllocated(producerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.producerid_.IsDefault()) {
    _impl_.producerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamInfoRsp.ProducerId)
}

// string ConsumerId = 2;
inline void GetStreamInfoRsp::clear_consumerid() {
  _impl_.consumerid_.ClearToEmpty();
}
inline const std::string& GetStreamInfoRsp::consumerid() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoRsp.ConsumerId)
  return _internal_consumerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamInfoRsp::set_consumerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoRsp.ConsumerId)
}
inline std::string* GetStreamInfoRsp::mutable_consumerid() {
  std::string* _s = _internal_mutable_consumerid();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamInfoRsp.ConsumerId)
  return _s;
}
inline const std::string& GetStreamInfoRsp::_internal_consumerid() const {
  return _impl_.consumerid_.Get();
}
inline void GetStreamInfoRsp::_internal_set_consumerid(const std::string& value) {
  
  _impl_.consumerid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamInfoRsp::_internal_mutable_consumerid() {
  
  return _impl_.consumerid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamInfoRsp::release_consumerid() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamInfoRsp.ConsumerId)
  return _impl_.consumerid_.Release();
}
inline void GetStreamInfoRsp::set_allocated_consumerid(std::string* consumerid) {
  if (consumerid != nullptr) {
    
  } else {
    
  }
  _impl_.consumerid_.SetAllocated(consumerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumerid_.IsDefault()) {
    _impl_.consumerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamInfoRsp.ConsumerId)
}

// string VideoCodingFormat = 3;
inline void GetStreamInfoRsp::clear_videocodingformat() {
  _impl_.videocodingformat_.ClearToEmpty();
}
inline const std::string& GetStreamInfoRsp::videocodingformat() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoRsp.VideoCodingFormat)
  return _internal_videocodingformat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamInfoRsp::set_videocodingformat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.videocodingformat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoRsp.VideoCodingFormat)
}
inline std::string* GetStreamInfoRsp::mutable_videocodingformat() {
  std::string* _s = _internal_mutable_videocodingformat();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamInfoRsp.VideoCodingFormat)
  return _s;
}
inline const std::string& GetStreamInfoRsp::_internal_videocodingformat() const {
  return _impl_.videocodingformat_.Get();
}
inline void GetStreamInfoRsp::_internal_set_videocodingformat(const std::string& value) {
  
  _impl_.videocodingformat_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamInfoRsp::_internal_mutable_videocodingformat() {
  
  return _impl_.videocodingformat_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamInfoRsp::release_videocodingformat() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamInfoRsp.VideoCodingFormat)
  return _impl_.videocodingformat_.Release();
}
inline void GetStreamInfoRsp::set_allocated_videocodingformat(std::string* videocodingformat) {
  if (videocodingformat != nullptr) {
    
  } else {
    
  }
  _impl_.videocodingformat_.SetAllocated(videocodingformat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.videocodingformat_.IsDefault()) {
    _impl_.videocodingformat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamInfoRsp.VideoCodingFormat)
}

// int32 width = 4;
inline void GetStreamInfoRsp::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t GetStreamInfoRsp::_internal_width() const {
  return _impl_.width_;
}
inline int32_t GetStreamInfoRsp::width() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoRsp.width)
  return _internal_width();
}
inline void GetStreamInfoRsp::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void GetStreamInfoRsp::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoRsp.width)
}

// int32 height = 5;
inline void GetStreamInfoRsp::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t GetStreamInfoRsp::_internal_height() const {
  return _impl_.height_;
}
inline int32_t GetStreamInfoRsp::height() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoRsp.height)
  return _internal_height();
}
inline void GetStreamInfoRsp::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void GetStreamInfoRsp::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoRsp.height)
}

// int32 FrameRate = 6;
inline void GetStreamInfoRsp::clear_framerate() {
  _impl_.framerate_ = 0;
}
inline int32_t GetStreamInfoRsp::_internal_framerate() const {
  return _impl_.framerate_;
}
inline int32_t GetStreamInfoRsp::framerate() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoRsp.FrameRate)
  return _internal_framerate();
}
inline void GetStreamInfoRsp::_internal_set_framerate(int32_t value) {
  
  _impl_.framerate_ = value;
}
inline void GetStreamInfoRsp::set_framerate(int32_t value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamInfoRsp.FrameRate)
}

// .pbmedia.ComReturn ret = 7;
inline bool GetStreamInfoRsp::_internal_has_ret() const {
  return this != internal_default_instance() && _impl_.ret_ != nullptr;
}
inline bool GetStreamInfoRsp::has_ret() const {
  return _internal_has_ret();
}
inline const ::pbmedia::ComReturn& GetStreamInfoRsp::_internal_ret() const {
  const ::pbmedia::ComReturn* p = _impl_.ret_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbmedia::ComReturn&>(
      ::pbmedia::_ComReturn_default_instance_);
}
inline const ::pbmedia::ComReturn& GetStreamInfoRsp::ret() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamInfoRsp.ret)
  return _internal_ret();
}
inline void GetStreamInfoRsp::unsafe_arena_set_allocated_ret(
    ::pbmedia::ComReturn* ret) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ret_);
  }
  _impl_.ret_ = ret;
  if (ret) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbproducer.GetStreamInfoRsp.ret)
}
inline ::pbmedia::ComReturn* GetStreamInfoRsp::release_ret() {
  
  ::pbmedia::ComReturn* temp = _impl_.ret_;
  _impl_.ret_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbmedia::ComReturn* GetStreamInfoRsp::unsafe_arena_release_ret() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamInfoRsp.ret)
  
  ::pbmedia::ComReturn* temp = _impl_.ret_;
  _impl_.ret_ = nullptr;
  return temp;
}
inline ::pbmedia::ComReturn* GetStreamInfoRsp::_internal_mutable_ret() {
  
  if (_impl_.ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbmedia::ComReturn>(GetArenaForAllocation());
    _impl_.ret_ = p;
  }
  return _impl_.ret_;
}
inline ::pbmedia::ComReturn* GetStreamInfoRsp::mutable_ret() {
  ::pbmedia::ComReturn* _msg = _internal_mutable_ret();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamInfoRsp.ret)
  return _msg;
}
inline void GetStreamInfoRsp::set_allocated_ret(::pbmedia::ComReturn* ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ret_);
  }
  if (ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ret));
    if (message_arena != submessage_arena) {
      ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamInfoRsp.ret)
}

// -------------------------------------------------------------------

// GetStreamDataRsp

// int64 Timestamp = 1;
inline void GetStreamDataRsp::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t GetStreamDataRsp::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t GetStreamDataRsp::timestamp() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamDataRsp.Timestamp)
  return _internal_timestamp();
}
inline void GetStreamDataRsp::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void GetStreamDataRsp::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamDataRsp.Timestamp)
}

// bool KeyFrame = 2;
inline void GetStreamDataRsp::clear_keyframe() {
  _impl_.keyframe_ = false;
}
inline bool GetStreamDataRsp::_internal_keyframe() const {
  return _impl_.keyframe_;
}
inline bool GetStreamDataRsp::keyframe() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamDataRsp.KeyFrame)
  return _internal_keyframe();
}
inline void GetStreamDataRsp::_internal_set_keyframe(bool value) {
  
  _impl_.keyframe_ = value;
}
inline void GetStreamDataRsp::set_keyframe(bool value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamDataRsp.KeyFrame)
}

// int32 FrameType = 3;
inline void GetStreamDataRsp::clear_frametype() {
  _impl_.frametype_ = 0;
}
inline int32_t GetStreamDataRsp::_internal_frametype() const {
  return _impl_.frametype_;
}
inline int32_t GetStreamDataRsp::frametype() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamDataRsp.FrameType)
  return _internal_frametype();
}
inline void GetStreamDataRsp::_internal_set_frametype(int32_t value) {
  
  _impl_.frametype_ = value;
}
inline void GetStreamDataRsp::set_frametype(int32_t value) {
  _internal_set_frametype(value);
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamDataRsp.FrameType)
}

// bytes FrameData = 4;
inline void GetStreamDataRsp::clear_framedata() {
  _impl_.framedata_.ClearToEmpty();
}
inline const std::string& GetStreamDataRsp::framedata() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamDataRsp.FrameData)
  return _internal_framedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStreamDataRsp::set_framedata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.framedata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbproducer.GetStreamDataRsp.FrameData)
}
inline std::string* GetStreamDataRsp::mutable_framedata() {
  std::string* _s = _internal_mutable_framedata();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamDataRsp.FrameData)
  return _s;
}
inline const std::string& GetStreamDataRsp::_internal_framedata() const {
  return _impl_.framedata_.Get();
}
inline void GetStreamDataRsp::_internal_set_framedata(const std::string& value) {
  
  _impl_.framedata_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStreamDataRsp::_internal_mutable_framedata() {
  
  return _impl_.framedata_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStreamDataRsp::release_framedata() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamDataRsp.FrameData)
  return _impl_.framedata_.Release();
}
inline void GetStreamDataRsp::set_allocated_framedata(std::string* framedata) {
  if (framedata != nullptr) {
    
  } else {
    
  }
  _impl_.framedata_.SetAllocated(framedata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.framedata_.IsDefault()) {
    _impl_.framedata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamDataRsp.FrameData)
}

// .pbmedia.ComReturn ret = 5;
inline bool GetStreamDataRsp::_internal_has_ret() const {
  return this != internal_default_instance() && _impl_.ret_ != nullptr;
}
inline bool GetStreamDataRsp::has_ret() const {
  return _internal_has_ret();
}
inline const ::pbmedia::ComReturn& GetStreamDataRsp::_internal_ret() const {
  const ::pbmedia::ComReturn* p = _impl_.ret_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbmedia::ComReturn&>(
      ::pbmedia::_ComReturn_default_instance_);
}
inline const ::pbmedia::ComReturn& GetStreamDataRsp::ret() const {
  // @@protoc_insertion_point(field_get:pbproducer.GetStreamDataRsp.ret)
  return _internal_ret();
}
inline void GetStreamDataRsp::unsafe_arena_set_allocated_ret(
    ::pbmedia::ComReturn* ret) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ret_);
  }
  _impl_.ret_ = ret;
  if (ret) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbproducer.GetStreamDataRsp.ret)
}
inline ::pbmedia::ComReturn* GetStreamDataRsp::release_ret() {
  
  ::pbmedia::ComReturn* temp = _impl_.ret_;
  _impl_.ret_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbmedia::ComReturn* GetStreamDataRsp::unsafe_arena_release_ret() {
  // @@protoc_insertion_point(field_release:pbproducer.GetStreamDataRsp.ret)
  
  ::pbmedia::ComReturn* temp = _impl_.ret_;
  _impl_.ret_ = nullptr;
  return temp;
}
inline ::pbmedia::ComReturn* GetStreamDataRsp::_internal_mutable_ret() {
  
  if (_impl_.ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbmedia::ComReturn>(GetArenaForAllocation());
    _impl_.ret_ = p;
  }
  return _impl_.ret_;
}
inline ::pbmedia::ComReturn* GetStreamDataRsp::mutable_ret() {
  ::pbmedia::ComReturn* _msg = _internal_mutable_ret();
  // @@protoc_insertion_point(field_mutable:pbproducer.GetStreamDataRsp.ret)
  return _msg;
}
inline void GetStreamDataRsp::set_allocated_ret(::pbmedia::ComReturn* ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ret_);
  }
  if (ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ret));
    if (message_arena != submessage_arena) {
      ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:pbproducer.GetStreamDataRsp.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbproducer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_producer_2eproto
