// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: producer.proto

#include "producer.pb.h"
#include "producer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pbproducer {

static const char* Producer_method_names[] = {
  "/pbproducer.Producer/GetStreamInfo",
  "/pbproducer.Producer/GetStreamData",
};

std::unique_ptr< Producer::Stub> Producer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Producer::Stub> stub(new Producer::Stub(channel, options));
  return stub;
}

Producer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetStreamInfo_(Producer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStreamData_(Producer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Producer::Stub::GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::pbproducer::GetStreamInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStreamInfo_, context, request, response);
}

void Producer::Stub::async::GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStreamInfo_, context, request, response, std::move(f));
}

void Producer::Stub::async::GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStreamInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>* Producer::Stub::PrepareAsyncGetStreamInfoRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbproducer::GetStreamInfoRsp, ::pbproducer::GetStreamInfoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStreamInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>* Producer::Stub::AsyncGetStreamInfoRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStreamInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::pbproducer::GetStreamDataRsp>* Producer::Stub::GetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::pbproducer::GetStreamDataRsp>::Create(channel_.get(), rpcmethod_GetStreamData_, context, request);
}

void Producer::Stub::async::GetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq* request, ::grpc::ClientReadReactor< ::pbproducer::GetStreamDataRsp>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::pbproducer::GetStreamDataRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStreamData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>* Producer::Stub::AsyncGetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pbproducer::GetStreamDataRsp>::Create(channel_.get(), cq, rpcmethod_GetStreamData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>* Producer::Stub::PrepareAsyncGetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pbproducer::GetStreamDataRsp>::Create(channel_.get(), cq, rpcmethod_GetStreamData_, context, request, false, nullptr);
}

Producer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Producer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Producer::Service, ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Producer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbproducer::GetStreamInfoReq* req,
             ::pbproducer::GetStreamInfoRsp* resp) {
               return service->GetStreamInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Producer_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Producer::Service, ::pbproducer::GetStreamDataReq, ::pbproducer::GetStreamDataRsp>(
          [](Producer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbproducer::GetStreamDataReq* req,
             ::grpc::ServerWriter<::pbproducer::GetStreamDataRsp>* writer) {
               return service->GetStreamData(ctx, req, writer);
             }, this)));
}

Producer::Service::~Service() {
}

::grpc::Status Producer::Service::GetStreamInfo(::grpc::ServerContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Producer::Service::GetStreamData(::grpc::ServerContext* context, const ::pbproducer::GetStreamDataReq* request, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pbproducer

