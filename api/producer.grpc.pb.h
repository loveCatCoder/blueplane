// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: producer.proto
#ifndef GRPC_producer_2eproto__INCLUDED
#define GRPC_producer_2eproto__INCLUDED

#include "producer.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pbproducer {

class Producer final {
 public:
  static constexpr char const* service_full_name() {
    return "pbproducer.Producer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::pbproducer::GetStreamInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pbproducer::GetStreamInfoRsp>> AsyncGetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pbproducer::GetStreamInfoRsp>>(AsyncGetStreamInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pbproducer::GetStreamInfoRsp>> PrepareAsyncGetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pbproducer::GetStreamInfoRsp>>(PrepareAsyncGetStreamInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pbproducer::GetStreamDataRsp>> GetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pbproducer::GetStreamDataRsp>>(GetStreamDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pbproducer::GetStreamDataRsp>> AsyncGetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pbproducer::GetStreamDataRsp>>(AsyncGetStreamDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pbproducer::GetStreamDataRsp>> PrepareAsyncGetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pbproducer::GetStreamDataRsp>>(PrepareAsyncGetStreamDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq* request, ::grpc::ClientReadReactor< ::pbproducer::GetStreamDataRsp>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pbproducer::GetStreamInfoRsp>* AsyncGetStreamInfoRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pbproducer::GetStreamInfoRsp>* PrepareAsyncGetStreamInfoRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pbproducer::GetStreamDataRsp>* GetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pbproducer::GetStreamDataRsp>* AsyncGetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pbproducer::GetStreamDataRsp>* PrepareAsyncGetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::pbproducer::GetStreamInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>> AsyncGetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>>(AsyncGetStreamInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>> PrepareAsyncGetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>>(PrepareAsyncGetStreamInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pbproducer::GetStreamDataRsp>> GetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pbproducer::GetStreamDataRsp>>(GetStreamDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>> AsyncGetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>>(AsyncGetStreamDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>> PrepareAsyncGetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>>(PrepareAsyncGetStreamDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void GetStreamInfo(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStreamData(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq* request, ::grpc::ClientReadReactor< ::pbproducer::GetStreamDataRsp>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>* AsyncGetStreamInfoRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pbproducer::GetStreamInfoRsp>* PrepareAsyncGetStreamInfoRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pbproducer::GetStreamDataRsp>* GetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request) override;
    ::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>* AsyncGetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pbproducer::GetStreamDataRsp>* PrepareAsyncGetStreamDataRaw(::grpc::ClientContext* context, const ::pbproducer::GetStreamDataReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStreamInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStreamData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStreamInfo(::grpc::ServerContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response);
    virtual ::grpc::Status GetStreamData(::grpc::ServerContext* context, const ::pbproducer::GetStreamDataReq* request, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStreamInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamInfo(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamInfoReq* /*request*/, ::pbproducer::GetStreamInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStreamInfo(::grpc::ServerContext* context, ::pbproducer::GetStreamInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::pbproducer::GetStreamInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStreamData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamData(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamDataReq* /*request*/, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStreamData(::grpc::ServerContext* context, ::pbproducer::GetStreamDataReq* request, ::grpc::ServerAsyncWriter< ::pbproducer::GetStreamDataRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStreamInfo<WithAsyncMethod_GetStreamData<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStreamInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pbproducer::GetStreamInfoReq* request, ::pbproducer::GetStreamInfoRsp* response) { return this->GetStreamInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetStreamInfo(
        ::grpc::MessageAllocator< ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamInfo(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamInfoReq* /*request*/, ::pbproducer::GetStreamInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStreamInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::pbproducer::GetStreamInfoReq* /*request*/, ::pbproducer::GetStreamInfoRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStreamData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::pbproducer::GetStreamDataReq, ::pbproducer::GetStreamDataRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pbproducer::GetStreamDataReq* request) { return this->GetStreamData(context, request); }));
    }
    ~WithCallbackMethod_GetStreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamData(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamDataReq* /*request*/, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::pbproducer::GetStreamDataRsp>* GetStreamData(
      ::grpc::CallbackServerContext* /*context*/, const ::pbproducer::GetStreamDataReq* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetStreamInfo<WithCallbackMethod_GetStreamData<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStreamInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamInfo(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamInfoReq* /*request*/, ::pbproducer::GetStreamInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStreamData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamData(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamDataReq* /*request*/, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStreamInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamInfo(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamInfoReq* /*request*/, ::pbproducer::GetStreamInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStreamInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStreamData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamData(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamDataReq* /*request*/, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStreamData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStreamInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStreamInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamInfo(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamInfoReq* /*request*/, ::pbproducer::GetStreamInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStreamInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStreamData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetStreamData(context, request); }));
    }
    ~WithRawCallbackMethod_GetStreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreamData(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamDataReq* /*request*/, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetStreamData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStreamInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStreamInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pbproducer::GetStreamInfoReq, ::pbproducer::GetStreamInfoRsp>* streamer) {
                       return this->StreamedGetStreamInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStreamInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStreamInfo(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamInfoReq* /*request*/, ::pbproducer::GetStreamInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStreamInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pbproducer::GetStreamInfoReq,::pbproducer::GetStreamInfoRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStreamInfo<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetStreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetStreamData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::pbproducer::GetStreamDataReq, ::pbproducer::GetStreamDataRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::pbproducer::GetStreamDataReq, ::pbproducer::GetStreamDataRsp>* streamer) {
                       return this->StreamedGetStreamData(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetStreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStreamData(::grpc::ServerContext* /*context*/, const ::pbproducer::GetStreamDataReq* /*request*/, ::grpc::ServerWriter< ::pbproducer::GetStreamDataRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetStreamData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pbproducer::GetStreamDataReq,::pbproducer::GetStreamDataRsp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetStreamData<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStreamInfo<WithSplitStreamingMethod_GetStreamData<Service > > StreamedService;
};

}  // namespace pbproducer


#endif  // GRPC_producer_2eproto__INCLUDED
